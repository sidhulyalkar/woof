You are a senior FlutterFlow engineer tasked with producing a production-quality, modern mobile app UI for **Woof**, a pet social fitness app. Build a clean, minimal UI using FlutterFlow’s best practices, following these requirements. Your deliverable should be a complete FlutterFlow project that I can export to Flutter code.

BRAND & STYLE
- Color theme: galaxy dark blue (#0B1B3B) with white backgrounds and subtle gradients; generous whitespace; rounded corners (12–20px).
- Components: consistent card layouts, large tappable buttons, clear empty states with simple illustrations.
- Typography: readable San-serif with strong hierarchy (H1 for page titles, H3 for section headers, body for content).

NAVIGATION
- Bottom tab bar with 5 tabs: Home (Feed), Walk, Meetups, Explore, Profile.
- Global FAB on Walk tab for “Start Walk”. Use a persistent top app bar with page titles and optional search on Meetups/Explore.

SCREENS (MVP)
1) Onboarding & Auth
   - Welcome, Create Account, Login (email/password), and “Add Your Pet” step.
   - Use Supabase Auth (email/password) with JWT; store session securely.
2) Home (Feed)
   - Scroll feed of posts (text + images), like & comment.
   - “What’s new?” composer.
   - Show XP/Level chip for current user at top.
3) Walk
   - Start/Pause/Finish a walk; show elapsed time, distance, pace.
   - After finishing: summary card + share to feed.
   - For demo: simulate route with polyline preview if location access not granted.
4) Meetups
   - List upcoming meetups as cards with time & distance; filters (pet type, size, date).
   - Map view toggle showing pins near user location.
   - Meetup detail: description, attendees, RSVP (choose pet), chat subpage.
5) Explore (Suggestions)
   - Categories: Dog Parks, Cat Cafes, Trails, Pet-Friendly Cafes, Vets, Other.
   - List + Map views, detail page with address and “Launch Maps” action.
6) Profile
   - User card (avatar, name, city), Pet list, Badges (grid), Gamification (XP/Level, rank), Premium status.
   - Settings: Notifications, Privacy, Sign Out.

DATA INTEGRATIONS
- Use **Supabase** as backend.
  - Tables available: users, pets, walks, meetups, meetup_attendees, posts, comments, likes, badges, user_badges, premium_tiers, user_subscriptions, activity_suggestions, chat_messages, ai_chat_sessions, ai_chat_messages.
  - RLS is enforced; use authenticated queries for user-owned data.
- REST endpoints (if needed) align with our OpenAPI (users/me, pets, walks, meetups, feed, premium, suggestions, chatbot). Prefer Supabase client where possible.

ACTIONS & LOGIC
- After Finish Walk: insert into `walks` then call Webhook(WALK_FINISHED_URL) with {user_id, pet_id, duration_minutes, distance_km}. Show toast on success.
- RSVP flow: insert into `meetup_attendees`; open chat subpage (chat_messages scoped to meetup_id).
- Feed interactions: insert posts, comments, likes; live updates via Supabase Realtime where feasible.
- Badges & XP are read-only from app (awarded by backend/n8n).
- Premium: show `/premium/tiers`; `/premium/subscribe` to open Stripe Checkout; reflect status via `/premium/status`.

UX POLISH
- Shimmer loaders, skeleton states.
- Error states with retry.
- Light haptics on key actions.
- Accessibility: sufficient contrast, large touch targets.

DELIVERABLES
- A complete FlutterFlow project wiring all screens, navigation, and data bindings to Supabase.
- Reusable components: PostCard, MeetupCard, SuggestionCard, BadgeChip.
- Env/config placeholders: SUPABASE_URL, SUPABASE_ANON_KEY, WALK_FINISHED_URL, STRIPE_PUBLISHABLE_KEY.
- Over-the-air update readiness and clean folder/component structure.