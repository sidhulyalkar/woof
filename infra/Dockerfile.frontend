# Frontend Dockerfile for Woof Next.js application
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
RUN npm run build

# Create a script to check build type and copy appropriate files
FROM base AS preparer
WORKDIR /app

# Copy the build output and dependencies
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/server.ts ./server.ts

# Create a script to handle the file copying
RUN echo '#!/bin/sh' > /app/copy-files.sh && \
    echo 'if [ -d "/app/.next/standalone" ]; then' >> /app/copy-files.sh && \
    echo '    echo "Standalone build detected"' >> /app/copy-files.sh && \
    echo '    cp -r /app/.next/standalone/* /app/target/' >> /app/copy-files.sh && \
    echo '    cp -r /app/.next/static /app/target/.next/' >> /app/copy-files.sh && \
    echo 'else' >> /app/copy-files.sh && \
    echo '    echo "Regular build detected"' >> /app/copy-files.sh && \
    echo '    cp -r /app/.next /app/target/' >> /app/copy-files.sh && \
    echo '    cp /app/package.json /app/target/' >> /app/copy-files.sh && \
    echo '    cp -r /app/node_modules /app/target/' >> /app/copy-files.sh && \
    echo 'fi' >> /app/copy-files.sh && \
    chmod +x /app/copy-files.sh

# Create target directory
RUN mkdir -p /app/target

# Run the copy script
RUN /app/copy-files.sh

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=preparer --chown=nextjs:nodejs /app/target ./

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Use the custom server with tsx
CMD ["npx", "tsx", "server.ts"]