# Frontend Dockerfile for Woof Next.js application
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Check if standalone output exists, if not use regular .next
RUN if [ -d "/app/.next/standalone" ]; then \
        echo "Using standalone output"; \
        COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./; \
        COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static; \
    else \
        echo "Using regular .next output"; \
        COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next; \
        COPY --from=builder /app/package.json ./package.json; \
        COPY --from=builder /app/node_modules ./node_modules; \
    fi

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Use server.js if it exists (standalone), otherwise use next start
CMD if [ -f "server.js" ]; then \
        node server.js; \
    else \
        npx next start; \
    fi