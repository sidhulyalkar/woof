// Woof Database Schema
// PostgreSQL with pgvector extension for ML compatibility scoring

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ============================================
// CORE ENTITIES
// ============================================

model User {
  id           String    @id @default(uuid())
  handle       String    @unique
  email        String    @unique
  passwordHash String?   @map("password_hash")
  authProvider String?   @map("auth_provider") // GOOGLE, APPLE, EMAIL
  bio          String?
  avatarUrl    String?   @map("avatar_url")
  homeLocation Json?     @map("home_location") // {lat, lng}
  visibility   String    @default("PUBLIC") // PUBLIC, FRIENDS_ONLY, PRIVATE
  points       Int       @default(0)
  totalPoints  Int       @default(0) @map("total_points")
  isVerified   Boolean   @default(false) @map("is_verified")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  pets                    Pet[]
  activities              Activity[]
  posts                   Post[]
  likes                   Like[]
  comments                Comment[]
  notifications           Notification[]
  integrationTokens       IntegrationToken[]
  mutualGoals             MutualGoal[]
  meetups                 Meetup[]
  meetupInvites           MeetupInvite[]
  redeemedRewards         Reward[]
  quizResponses           QuizResponse[]
  featureVector           MLFeatureVector?
  conversationParticipants ConversationParticipant[]
  messages                Message[]
  verifications           Verification[] @relation("UserVerifications")
  hostedEvents            CommunityEvent[] @relation("EventHost")
  eventRsvps              EventRSVP[] @relation("EventRSVPs")
  eventFeedbacks          EventFeedback[] @relation("EventFeedbacks")
  locationPings           LocationPing[] @relation("UserLocationPings")

  @@map("users")
}

model Pet {
  id            String    @id @default(uuid())
  ownerId       String    @map("owner_id")
  name          String
  species       String    // DOG, CAT, etc
  breed         String?
  sex           String?   // MALE, FEMALE, UNKNOWN
  birthdate     DateTime?
  temperament   Json?     // {friendly: 5, energetic: 4, ...}
  vaccinations  Json?     // [{name: "Rabies", date: "2024-01-01"}]
  avatarUrl     String?   @map("avatar_url")
  embedding     Unsupported("vector(384)")?  // pgvector for compatibility
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  devices       Device[]
  activities    Activity[]
  posts         Post[]
  mutualGoals   MutualGoal[]
  meetupInvites MeetupInvite[]
  edgesA        PetEdge[] @relation("PetA")
  edgesB        PetEdge[] @relation("PetB")
  verifications Verification[] @relation("PetVerifications")

  @@index([ownerId])
  @@map("pets")
}

model Device {
  id         String    @id @default(uuid())
  petId      String    @map("pet_id")
  kind       String    // AIRTAG, GENERIC_GPS, CUSTOM_COLLAR
  externalId String?   @map("external_id")
  lastSeenAt DateTime? @map("last_seen_at")
  status     String    @default("ACTIVE") // ACTIVE, INACTIVE, LOST
  createdAt  DateTime  @default(now()) @map("created_at")

  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId])
  @@map("devices")
}

// ============================================
// ACTIVITIES & FITNESS
// ============================================

model Activity {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  petId        String?  @map("pet_id")
  startedAt    DateTime @map("started_at")
  endedAt      DateTime? @map("ended_at")
  type         String   // WALK, RUN, PLAY, HIKE
  route        Json?    // GeoJSON
  humanMetrics Json?    @map("human_metrics") // {steps, calories, hr_avg}
  petMetrics   Json?    @map("pet_metrics")   // {distance, active_time}
  jointMetrics Json?    @map("joint_metrics") // {sync_score}
  createdAt    DateTime @default(now()) @map("created_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet   Pet?  @relation(fields: [petId], references: [id], onDelete: SetNull)
  posts Post[]

  @@index([userId])
  @@index([petId])
  @@index([startedAt])
  @@map("activities")
}

model MutualGoal {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  petId         String   @map("pet_id")
  goalType      String   @map("goal_type") // DISTANCE, TIME, STEPS, ACTIVITIES, CALORIES, SOCIAL
  period        String   // DAILY, WEEKLY, MONTHLY, CUSTOM
  targetNumber  Float    @map("target_number")
  targetUnit    String   @map("target_unit") // km, minutes, steps, count, kcal, friends
  progress      Float    @default(0)
  currentValue  Float    @default(0) @map("current_value")
  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, FAILED, PAUSED
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  reminderTime  String?  @map("reminder_time") // HH:MM format
  isRecurring   Boolean  @default(false) @map("is_recurring")
  streakCount   Int      @default(0) @map("streak_count")
  bestStreak    Int      @default(0) @map("best_streak")
  completedDays Json     @default("[]") @map("completed_days") // Array of dates
  metadata      Json?    // Additional goal-specific data
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([petId])
  @@index([status])
  @@index([endDate])
  @@map("mutual_goals")
}

model Reward {
  id          String    @id @default(uuid())
  code        String    @unique
  title       String
  description String?
  points      Int
  partner     String?
  expiresAt   DateTime? @map("expires_at")
  redeemedBy  String?   @map("redeemed_by")
  redeemedAt  DateTime? @map("redeemed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  user User? @relation(fields: [redeemedBy], references: [id])

  @@index([redeemedBy])
  @@map("rewards")
}

// ============================================
// SOCIAL GRAPH
// ============================================

model PetEdge {
  id                   String   @id @default(uuid())
  petAId               String   @map("pet_a_id")
  petBId               String   @map("pet_b_id")
  weight               Float    @default(1.0)
  compatibilityScore   Float?   @map("compatibility_score")
  lastInteractionAt    DateTime? @map("last_interaction_at")
  status               String   @default("PROPOSED") // PROPOSED, CONFIRMED, AVOID
  createdAt            DateTime @default(now()) @map("created_at")

  petA Pet @relation("PetA", fields: [petAId], references: [id], onDelete: Cascade)
  petB Pet @relation("PetB", fields: [petBId], references: [id], onDelete: Cascade)

  @@unique([petAId, petBId])
  @@index([petAId])
  @@index([petBId])
  @@map("pet_edges")
}

// ============================================
// MEETUPS
// ============================================

model Meetup {
  id           String   @id @default(uuid())
  title        String
  location     Json     // GeoJSON point
  radiusM      Int      @default(500) @map("radius_m")
  startsAt     DateTime @map("starts_at")
  endsAt       DateTime? @map("ends_at")
  status       String   @default("SCHEDULED") // SCHEDULED, ACTIVE, COMPLETED, CANCELLED
  creatorUserId String  @map("creator_user_id")
  createdAt    DateTime @default(now()) @map("created_at")

  creator User           @relation(fields: [creatorUserId], references: [id])
  invites MeetupInvite[]

  @@index([creatorUserId])
  @@index([startsAt])
  @@map("meetups")
}

model MeetupInvite {
  id        String    @id @default(uuid())
  meetupId  String    @map("meetup_id")
  userId    String    @map("user_id")
  petId     String?   @map("pet_id")
  rsvp      String    @default("MAYBE") // YES, MAYBE, NO
  checkinAt DateTime? @map("checkin_at")
  createdAt DateTime  @default(now()) @map("created_at")

  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet    Pet?   @relation(fields: [petId], references: [id], onDelete: SetNull)

  @@unique([meetupId, userId])
  @@index([meetupId])
  @@index([userId])
  @@map("meetup_invites")
}

// ============================================
// SOCIAL CONTENT
// ============================================

model Post {
  id           String   @id @default(uuid())
  authorUserId String   @map("author_user_id")
  petId        String?  @map("pet_id")
  text         String?
  mediaUrls    String[] @map("media_urls")
  activityId   String?  @map("activity_id")
  visibility   String   @default("PUBLIC") // PUBLIC, FRIENDS_ONLY, PRIVATE
  createdAt    DateTime @default(now()) @map("created_at")

  author   User      @relation(fields: [authorUserId], references: [id], onDelete: Cascade)
  pet      Pet?      @relation(fields: [petId], references: [id], onDelete: SetNull)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  likes    Like[]
  comments Comment[]

  @@index([authorUserId])
  @@index([petId])
  @@index([createdAt])
  @@map("posts")
}

model Like {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("comments")
}

// ============================================
// CHAT & MESSAGING
// ============================================

model Conversation {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(uuid())
  conversationId String   @map("conversation_id")
  userId         String   @map("user_id")
  joinedAt       DateTime @default(now()) @map("joined_at")
  lastReadAt     DateTime? @map("last_read_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String   @id @default(uuid())
  conversationId String   @map("conversation_id")
  senderId       String   @map("sender_id")
  text           String
  mediaUrls      String[] @map("media_urls") @default([])
  createdAt      DateTime @default(now()) @map("created_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

// ============================================
// NOTIFICATIONS & INTEGRATIONS
// ============================================

model Notification {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  type      String    // FRIEND_REQUEST, MEETUP_INVITE, GOAL_ACHIEVED, etc
  payload   Json
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
}

model IntegrationToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  provider  String    // APPLE, GOOGLE, STRAVA, INSTAGRAM, MAPBOX
  scopes    String[]
  expiresAt DateTime? @map("expires_at")
  data      Json      // Encrypted token data
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@map("integration_tokens")
}

// ============================================
// PLACES
// ============================================

model Place {
  id           String   @id @default(uuid())
  name         String
  kind         String   // DOG_PARK, TRAIL, CAFE, STORE
  location     Json     // GeoJSON point
  score        Float?
  hours        Json?    // {monday: "9-17", ...}
  petPolicies  Json?    @map("pet_policies") // {dogs_allowed: true, ...}
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("places")
}

// ============================================
// TELEMETRY
// ============================================

model Telemetry {
  id        String   @id @default(uuid())
  source    String   // WEB, MOBILE, API
  event     String   // PAGE_VIEW, BUTTON_CLICK, etc
  userId    String?  @map("user_id")
  petId     String?  @map("pet_id")
  data      Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([source])
  @@index([event])
  @@index([createdAt])
  @@map("telemetry")
}

// ============================================
// ML & QUIZ SYSTEM
// ============================================

model QuizResponse {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  petId       String?  @map("pet_id")
  sessionId   String   @map("session_id")
  responses   Json     // Array of {questionId, answer, customAnswer, timestamp}
  completedAt DateTime @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@map("quiz_responses")
}

model MLFeatureVector {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  petId     String?  @unique @map("pet_id")
  features  Json     // MLFeatureVector.features object
  timestamp DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchesFrom UserInteraction[]    @relation("UserMLFeatures")
  matchesTo   UserInteraction[]    @relation("TargetMLFeatures")

  @@index([userId])
  @@map("ml_feature_vectors")
}

model UserInteraction {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  targetUserId     String    @map("target_user_id")
  action           String    // like, skip, super_like
  matched          Boolean   @default(false)
  meetupOccurred   Boolean   @default(false) @map("meetup_occurred")
  meetupRating     Int?      @map("meetup_rating") // 1-5 stars
  compatibilityScore Float?  @map("compatibility_score")
  timestamp        DateTime  @default(now())

  userFeatures   MLFeatureVector @relation("UserMLFeatures", fields: [userId], references: [userId], onDelete: Cascade)
  targetFeatures MLFeatureVector @relation("TargetMLFeatures", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([targetUserId])
  @@index([timestamp])
  @@index([action])
  @@map("user_interactions")
}

model MLTrainingData {
  id          String   @id @default(uuid())
  dataPoint   Json     // Complete MLTrainingDataPoint object
  label       Float?   // Outcome score 0-1
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@map("ml_training_data")
}

// ============================================
// BETA MVP: MEETUPS & CO-ACTIVITY
// ============================================

model MeetupProposal {
  id              String    @id @default(uuid())
  proposerId      String    @map("proposer_id")
  recipientId     String    @map("recipient_id")
  suggestedTime   DateTime  @map("suggested_time")
  suggestedVenue  Json      @map("suggested_venue") // {name, lat, lng, type, address}
  status          String    @default("pending") // pending, accepted, declined, completed, cancelled
  occurredAt      DateTime? @map("occurred_at")
  rating          Int?      // 1-5 stars
  feedbackTags    String[]  @map("feedback_tags") // energy_mismatch, size_issue, temperament, great_match, owner_friendly
  checklistOk     Boolean   @default(false) @map("checklist_ok")
  notes           String?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@index([proposerId])
  @@index([recipientId])
  @@index([status])
  @@index([suggestedTime])
  @@map("meetup_proposals")
}

model LocationPing {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  lat          Float
  lng          Float
  timestamp    DateTime
  activityType String?  @map("activity_type") // walking, running, park_visit
  createdAt    DateTime @default(now()) @map("created_at")

  user User @relation("UserLocationPings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([timestamp])
  @@index([lat, lng])
  @@map("location_pings")
}

model CoActivitySegment {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  petId         String   @map("pet_id")
  otherUserId   String?  @map("other_user_id")
  otherPetId    String?  @map("other_pet_id")
  startTime     DateTime @map("start_time")
  endTime       DateTime @map("end_time")
  distanceM     Float    @map("distance_m")
  gpsOverlapM   Float?   @map("gps_overlap_m")
  avgPace       Float?   @map("avg_pace") // meters per minute
  venueType     String?  @map("venue_type") // park, trail, urban, beach, indoor
  gpsTraceRef   String?  @map("gps_trace_ref") // Reference to stored GPS data
  steps         Int?
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([petId])
  @@index([startTime])
  @@index([venueType])
  @@map("co_activity_segments")
}

// ============================================
// BETA MVP: COMMUNITY EVENTS
// ============================================

model CommunityEvent {
  id                String   @id @default(uuid())
  title             String
  description       String?
  hostUserId        String   @map("host_user_id")
  venueType         String   @map("venue_type") // park, trail, beach, cafe, indoor
  lat               Float
  lng               Float
  venueName         String?  @map("venue_name")
  address           String?
  startTime         DateTime @map("start_time")
  endTime           DateTime @map("end_time")
  capacity          Int?
  rsvpCount         Int      @default(0) @map("rsvp_count")
  visibility        String   @default("PUBLIC") // PUBLIC, FRIENDS, PRIVATE
  recurring         Boolean  @default(false)
  recurringPattern  String?  @map("recurring_pattern") // weekly_saturday_9am, etc
  postFeedbackScore Float?   @map("post_feedback_score")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  organizer User            @relation("EventHost", fields: [hostUserId], references: [id])
  rsvps     EventRSVP[]
  feedback  EventFeedback[]

  @@index([hostUserId])
  @@index([startTime])
  @@index([lat, lng])
  @@index([visibility])
  @@map("community_events")
}

model EventRSVP {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  userId      String    @map("user_id")
  petId       String?   @map("pet_id")
  status      String    @default("YES") // YES, MAYBE, NO
  checkedInAt DateTime? @map("checked_in_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  event CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User           @relation("EventRSVPs", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@map("event_rsvps")
}

model EventFeedback {
  id          String   @id @default(uuid())
  eventId     String   @map("event_id")
  userId      String   @map("user_id")
  vibeScore   Int      @map("vibe_score") // 1-5
  petDensity  String?  @map("pet_density") // too_crowded, just_right, too_few
  surfaceType String?  @map("surface_type") // grass, dirt, pavement, sand
  crowding    String?  // not_crowded, moderate, crowded
  noiseLevel  String?  @map("noise_level") // quiet, moderate, loud
  tags        String[] // fun, well_organized, safe, would_repeat, too_short, too_long
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")

  event CommunityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User           @relation("EventFeedbacks", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([vibeScore])
  @@map("event_feedback")
}

// ============================================
// BETA MVP: SERVICES HUB
// ============================================

model Business {
  id          String   @id @default(uuid())
  name        String
  type        String   // groomer, vet, trainer, store, park, restaurant, walker, daycare
  lat         Float
  lng         Float
  address     String?
  phone       String?
  website     String?
  rating      Float?
  reviewCount Int?     @map("review_count")
  hours       Json?    // {monday: "9-17", tuesday: "9-17", ...}
  petPolicies Json?    @map("pet_policies") // {dogs_allowed: true, size_limit: "50lbs", ...}
  partnered   Boolean  @default(false)
  partnerTier String?  @map("partner_tier") // bronze, silver, gold
  logoUrl     String?  @map("logo_url")
  photos      String[] @default([])
  amenities   String[] @default([]) // parking, outdoor_seating, grooming_on_site, etc
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  serviceIntents ServiceIntent[]

  @@index([type])
  @@index([lat, lng])
  @@index([partnered])
  @@index([rating])
  @@map("businesses")
}

model ServiceIntent {
  id                 String    @id @default(uuid())
  userId             String    @map("user_id")
  businessId         String    @map("business_id")
  action             String    // view, tap_call, tap_directions, tap_website, tap_book
  conversionFollowup Boolean?  @map("conversion_followup") // Did they actually book/visit?
  followupAskedAt    DateTime? @map("followup_asked_at")
  followupResponse   String?   @map("followup_response") // yes, no, not_yet
  createdAt          DateTime  @default(now()) @map("created_at")

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([businessId])
  @@index([action])
  @@index([createdAt])
  @@index([conversionFollowup])
  @@map("service_intents")
}

// ============================================
// BETA MVP: GAMIFICATION
// ============================================

model Gamification {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  points       Int      @default(0)
  level        Int      @default(1)
  badges       String[] // first_match, first_meetup, pack_leader, explorer, social_butterfly, etc
  weeklyStreak Int      @default(0) @map("weekly_streak")
  lastActiveAt DateTime @default(now()) @map("last_active_at")
  streakStart  DateTime? @map("streak_start")
  totalMeetups Int      @default(0) @map("total_meetups")
  totalEvents  Int      @default(0) @map("total_events")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([points])
  @@index([level])
  @@index([weeklyStreak])
  @@map("gamification")
}

model PointTransaction {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  points           Int      // Can be positive or negative
  reason           String   // onboarding_complete, first_match, meetup_attended, badge_earned, etc
  relatedEntityId  String?  @map("related_entity_id") // ID of related entity (meetup, event, etc)
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([createdAt])
  @@index([reason])
  @@map("point_transactions")
}

model BadgeAward {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  badgeType String   @map("badge_type") // first_match, streak_master, social_butterfly, etc
  awardedAt DateTime @default(now()) @map("awarded_at")

  @@unique([userId, badgeType], name: "userId_badgeType")
  @@index([userId])
  @@index([badgeType])
  @@map("badge_awards")
}

model WeeklyStreak {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  currentWeek    Int      @default(0) @map("current_week")
  lastActivityAt DateTime @map("last_activity_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("weekly_streaks")
}

// ============================================
// BETA MVP: PROACTIVE FEATURES
// ============================================

model ProactiveNudge {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  targetUserId String?   @map("target_user_id")
  type         String    // meetup, event, service, safety_reminder, feedback_request
  payload      Json      // Context data specific to nudge type
  sentVia      String    @default("push") @map("sent_via") // push, in_app, email
  accepted     Boolean?  // null = pending/not_responded
  dismissed    Boolean   @default(false)
  respondedAt  DateTime? @map("responded_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  sentAt       DateTime  @default(now()) @map("sent_at")

  @@index([userId])
  @@index([type])
  @@index([sentAt])
  @@index([accepted])
  @@index([dismissed])
  @@map("proactive_nudges")
}

model NudgeCooldown {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  targetUserId String?  @map("target_user_id")
  nudgeType    String   @map("nudge_type")
  cooldownUntil DateTime @map("cooldown_until")
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([userId, targetUserId, nudgeType])
  @@index([userId])
  @@index([cooldownUntil])
  @@map("nudge_cooldowns")
}

// ============================================
// BETA MVP: SAFETY & VERIFICATION
// ============================================

model Verification {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  petId        String?   @map("pet_id")
  documentType String    @map("document_type") // vaccination_record, vet_certificate, license, identity, other
  fileUrl      String    @map("file_url")
  status       String    @default("pending") // pending, approved, rejected
  notes        String?   // User-provided notes
  reviewNotes  String?   @map("review_notes") // Admin review notes
  uploadedAt   DateTime  @default(now()) @map("uploaded_at")
  reviewedAt   DateTime? @map("reviewed_at")

  user User  @relation("UserVerifications", fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet?  @relation("PetVerifications", fields: [petId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([petId])
  @@index([status])
  @@map("verifications")
}

model SafetyVerification {
  id               String    @id @default(uuid())
  userId           String    @unique @map("user_id")
  vaccineDocUrl    String?   @map("vaccine_doc_url")
  vaccineVerified  Boolean   @default(false) @map("vaccine_verified")
  vaccineExpiry    DateTime? @map("vaccine_expiry")
  idDocUrl         String?   @map("id_doc_url")
  idVerified       Boolean   @default(false) @map("id_verified")
  trustedBadge     Boolean   @default(false) @map("trusted_badge")
  verificationNotes String?  @map("verification_notes")
  verifiedAt       DateTime? @map("verified_at")
  verifiedBy       String?   @map("verified_by") // admin user ID
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@index([vaccineVerified])
  @@index([trustedBadge])
  @@map("safety_verifications")
}

model ReportFlag {
  id           String   @id @default(uuid())
  reporterId   String   @map("reporter_id")
  reportedId   String   @map("reported_id")
  reason       String   // inappropriate_behavior, safety_concern, spam, fake_profile, harassment
  description  String?
  evidence     String[] // URLs to screenshots, etc
  status       String   @default("pending") // pending, reviewed, action_taken, dismissed
  reviewedBy   String?  @map("reviewed_by")
  reviewedAt   DateTime? @map("reviewed_at")
  actionTaken  String?  @map("action_taken")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([reportedId])
  @@index([status])
  @@index([createdAt])
  @@map("report_flags")
}

model BlockedUser {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  blockedId String   @map("blocked_id")
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, blockedId])
  @@index([userId])
  @@index([blockedId])
  @@map("blocked_users")
}
